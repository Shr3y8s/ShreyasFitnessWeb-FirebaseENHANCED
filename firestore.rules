rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions for cleaner rule management
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isTrainer() {
      return isAuthenticated() && (
        // Check admins collection first
        (exists(/databases/$(database)/documents/admins/$(request.auth.uid)) &&
         get(/databases/$(database)/documents/admins/$(request.auth.uid)).data.role in ['trainer', 'admin']) ||
        // Fall back to users collection
        (exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['trainer', 'admin'])
      );
    }
    
    function isTrainerOrAdmin() {
      return isAuthenticated() && (
        // Check admins collection first
        (exists(/databases/$(database)/documents/admins/$(request.auth.uid)) &&
         get(/databases/$(database)/documents/admins/$(request.auth.uid)).data.role in ['trainer', 'admin']) ||
        // Fall back to users collection
        (exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['trainer', 'admin'])
      );
    }

    // Contact Form Submissions - New collection for contact form
    match /contact_form_submissions/{submissionId} {
      allow create: if true;  // Allow public contact form submissions
      allow read, update, delete: if isTrainerOrAdmin();  // Only trainers/admins can manage submissions
      
      // Replies subcollection for trainer responses
      match /replies/{replyId} {
        allow read: if isTrainerOrAdmin();
        allow create, update, delete: if isTrainerOrAdmin();
      }
    }
    
    // ADMIN COLLECTION: Protected collection for admin accounts
    match /admins/{adminId} {
      // Admins can read their own profile
      allow read: if request.auth.uid == adminId;
      
      // Admin profiles are manually created/managed only
      allow write: if false;
    }
    
    // Enhanced user profile rules for dashboard
    match /users/{userId} {
      // Allow users to read their own profile
      allow read: if isOwner(userId);
      
      // TRAINER DASHBOARD: Allow trainers to read all client profiles for management
      allow read: if isTrainerOrAdmin();
      
      // Allow users to update their own profile with validation
      // IMPORTANT: Users cannot modify role, createdAt, or paymentStatus (only Stripe Extension can update paymentStatus)
      allow update: if isOwner(userId) &&
                    (!request.resource.data.diff(resource.data).affectedKeys()
                      .hasAny(['role', 'createdAt', 'paymentStatus', 'stripeCustomerId', 'subscriptionId']));
                      
      // Allow initial creation of user documents (for signup process)
      // Users can create their account with paymentStatus: "pending"
      allow create: if isOwner(userId) &&
                    request.resource.data.paymentStatus == 'pending';
    
      // Dashboard data collection
      match /dashboard_data/{docId} {
        allow read: if request.auth != null && request.auth.uid == userId;
        allow write: if request.auth != null && request.auth.uid == userId;
      }
      
      // Training plans
      match /training_plans/{planId} {
        allow read: if request.auth != null && request.auth.uid == userId;
        // Only the user or admin can create/update plans
        allow write: if request.auth != null && 
                     (request.auth.uid == userId || 
                      get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
      }
      
      // Sessions
      match /sessions/{sessionId} {
        allow read: if request.auth != null && request.auth.uid == userId;
        
        // Session data validation
        function validateSessionData() {
          let data = request.resource.data;
          return data.keys().hasAll(['date', 'title', 'type', 'duration']) &&
                 data.date is timestamp &&
                 data.title is string &&
                 data.duration is number &&
                 data.duration > 0;
        }
        
        // Allow create with validation
        allow create: if request.auth != null && 
                      request.auth.uid == userId &&
                      validateSessionData();
                      
        // Allow update with validation
        allow update: if request.auth != null && 
                      request.auth.uid == userId &&
                      validateSessionData();
      }
      
      // Progress metrics
      match /metrics/{metricId} {
        allow read: if request.auth != null && request.auth.uid == userId;
        
        // Metric data validation
        function validateMetricData() {
          let data = request.resource.data;
          return data.keys().hasAll(['date', 'type', 'value']) &&
                 data.date is timestamp &&
                 data.type is string &&
                 data.value is number;
        }
        
        // Allow create with validation
        allow create: if request.auth != null && 
                      request.auth.uid == userId &&
                      validateMetricData();
                      
        // Allow update with validation
        allow update: if request.auth != null && 
                      request.auth.uid == userId &&
                      validateMetricData();
      }
    }
    
    // WORKOUT MANAGEMENT SYSTEM - Phase 1 & 2
    
    // Exercise Library Collection - Phase 2: Shared exercise library
    match /exercises/{exerciseId} {
      // Trainers can create, read, update, and delete exercises
      allow read, write: if isTrainerOrAdmin();
      
      // Clients can read public exercises (for viewing workout details)
      allow read: if isAuthenticated() && resource.data.isPublic == true;
      
      // Exercise validation
      function validateExercise() {
        let data = request.resource.data;
        return data.keys().hasAll(['name', 'instructions', 'category', 'createdBy']) &&
               data.name is string && data.name.size() > 0 &&
               data.instructions is string && data.instructions.size() > 0 &&
               data.category in ['strength', 'cardio', 'flexibility', 'core', 'other'] &&
               data.createdBy is string &&
               data.targetMuscleGroups is list &&
               data.equipment is list;
      }
      
      // Apply validation on create and update
      allow create: if isTrainerOrAdmin() && validateExercise();
      allow update: if isTrainerOrAdmin() && validateExercise();
    }
    
    // Workout Templates Collection - Core functionality for trainer dashboard
    match /workout_templates/{templateId} {
      // Trainers can create, read, update, and delete workout templates
      allow read, write: if isTrainerOrAdmin();
      
      // Clients can read public workout templates (for future assignment features)
      allow read: if isAuthenticated() && resource.data.isPublic == true;
      
      // Workout template validation
      function validateWorkoutTemplate() {
        let data = request.resource.data;
        return data.keys().hasAll(['name', 'createdBy', 'exercises', 'difficulty', 'category']) &&
               data.name is string && data.name.size() > 0 &&
               data.createdBy is string &&
               data.exercises is list &&
               data.difficulty in ['beginner', 'intermediate', 'advanced'] &&
               data.category in ['strength', 'cardio', 'hiit', 'flexibility', 'mixed'] &&
               data.estimatedDuration is number && data.estimatedDuration > 0;
      }
      
      // Apply validation on create and update
      allow create: if isTrainerOrAdmin() && validateWorkoutTemplate();
      allow update: if isTrainerOrAdmin() && validateWorkoutTemplate();
    }
    
    // Future collections for workout assignments and progress tracking
    // These will be added in Phase 2
    match /assigned_workouts/{assignmentId} {
      // Trainers can assign and manage workouts
      allow read, write: if isTrainerOrAdmin();
      
      // Clients can read and update their own assigned workouts
      allow read, update: if isAuthenticated() && 
                          request.auth.uid == resource.data.clientId;
    }
    
    match /workout_progress/{progressId} {
      // Trainers can view all progress data
      allow read: if isTrainerOrAdmin();
      
      // Clients can read and update their own workout progress
      allow read, write: if isAuthenticated() && 
                         request.auth.uid == resource.data.clientId;
    }

    // CLIENT MESSAGING SYSTEM - Phase 3
    match /client_messages/{messageId} {
      // Trainers can read and send messages
      allow read: if isTrainerOrAdmin();
      allow create: if isTrainerOrAdmin() && 
                    request.resource.data.senderId == request.auth.uid;
      
      // Clients can read messages in their own conversations and send messages
      allow read: if isAuthenticated() && 
                  (request.auth.uid in resource.data.conversationId.split('_'));
      allow create: if isAuthenticated() && 
                    request.resource.data.senderId == request.auth.uid &&
                    (request.auth.uid in request.resource.data.conversationId.split('_'));
      
      // Message validation
      function validateMessage() {
        let data = request.resource.data;
        return data.keys().hasAll(['conversationId', 'senderId', 'senderName', 'recipientId', 'content', 'createdAt']) &&
               data.conversationId is string &&
               data.senderId is string &&
               data.senderName is string &&
               data.recipientId is string &&
               data.content is string && data.content.size() > 0 &&
               data.content.size() <= 2000; // Max 2000 characters
      }
      
      // Apply validation on create
      allow create: if (isTrainerOrAdmin() || isAuthenticated()) && 
                    validateMessage() &&
                    request.resource.data.senderId == request.auth.uid;
      
      // Allow marking as read
      allow update: if isAuthenticated() && 
                    request.auth.uid == resource.data.recipientId &&
                    request.resource.data.diff(resource.data).affectedKeys().hasOnly(['read']);
    }
    
    // Stripe Products - Public read access
    match /stripe_products/{document=**} {
      allow read: if true;  // Allow public reads for product/price info
    }
    
    // Stripe Customers - User-specific access with Extension support
    match /stripe_customers/{userId} {
      // Users can create their own customer document during signup
      allow create: if isAuthenticated() && request.auth.uid == userId;
      
      // Users can read their own customer data
      allow read: if isAuthenticated() && request.auth.uid == userId;
      
      // Only Extension/Admin can update (Extension uses admin SDK so bypasses rules)
      allow update, delete: if false;
      
      // Subscriptions subcollection - managed by Extension
      match /subscriptions/{subscriptionId} {
        allow read: if isAuthenticated() && request.auth.uid == userId;
        allow write: if false; // Only Extension can write
      }
      
      // Payments subcollection - managed by Extension
      match /payments/{paymentId} {
        allow read: if isAuthenticated() && request.auth.uid == userId;
        allow write: if false; // Only Extension can write
      }
      
      // Checkout sessions - managed by Extension
      match /checkout_sessions/{sessionId} {
        allow read, write: if isAuthenticated() && request.auth.uid == userId;
      }
    }
    
    // Global configuration accessible to all authenticated users
    match /config/{configId} {
      allow read: if request.auth != null;
      allow write: if false; // Only admins can write via backend
    }
    
    // Feature flags
    match /features/{featureId} {
      allow read: if request.auth != null;
      allow write: if false; // Only admins can write via backend
    }
    
    // Default deny all other collections
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
